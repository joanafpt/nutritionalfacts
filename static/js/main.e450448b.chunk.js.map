{"version":3,"sources":["functions/functions.js","components/Modal.js","constants/constants.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["highStr","medStr","lowStr","f","sf","sg","st","functions","validateIfNumeric","str","maxVal","minVal","caughtVal","quantificatorWord","substr","indexOf","divided","split","length","numberPattern","y","match","push","Number","checkNutritionalValue","val","checkSaturFats","saturfatz","checkSugar","sugarval","checkSalt","saltval","checkNutritionalValueSolids","gordura","checkSaturFatsSolids","gordSat","checkSugarSolids","acuc","checkSaltSolids","sal","styles","buttonZero","backgroundColor","color","modalBackground","position","opacity","width","height","top","left","modal","zIndex","Modal","props","console","log","show","className","style","onClick","onClose","drinkForm","commonStringBeverage","commonString","validationOfFatSolids","validationOfSaturSolids","validationOfSugarSolids","validationOfSaltSolids","food","label1","label2","label3","label4","title","fat","satFat","sugar","salt","liq_fat","liq_satFat","liq_sugar","liq_salt","colTitle","Form","validationOfFat","validationOfSatur","validationOfSugar","validationOfSalt","whichFormRef","useRef","fatRef","saturRef","sugarRef","saltyRef","useState","fatMaxFood","fatOption","setFatOption","satFatMaxFood","satFatOption","setSatFatOption","maxSugar","sugarOption","setSugarOption","maxSalt","saltOption","setSaltOption","fatBeb","setFatBeb","satFatBeb","setSatFatBeb","sugarOptionBeb","setSugarOptionBeb","saltOptionBeb","setSaltOptionBeb","activate","setActivate","stroutp","setStrOutp","stringDrinkOutput","setStringDrinkOutput","fOutp","setFOutp","satfOutp","setSatFOutp","sugOutp","setSugFOutp","salOutp","setSalFOutp","formIsFood","setFormIsFood","formIsDrink","setFormIsDrink","out","toggle","useEffect","document","addEventListener","handleClickOutside","removeEventListener","event","current","contains","target","handleChange","innerText","startsWith","value","ref","htmlFor","label","id","onChange","fatMediumFood","fatMinFood","satFatMediumFood","satFatMinFood","mediumSugar","minSugar","mediumSalt","minSalt","type","preventDefault","valorRetornado","arrayComValoresRetornados","possibilities","x","foodForm","App","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e450448b.chunk.js","sourcesContent":["\r\nconst validateIfNumeric = (str) => {\r\n    var plusWord = 'Mais';\r\n    var minusWord = 'At√©';\r\n    var maxVal, medMinVal, medMaxVal, minVal;\r\n    var caughtVal = [];\r\n    var quantificatorWord = str.substr(0, str.indexOf(' '));\r\n    var divided = str.split(' ', str.length);\r\n    var numberPattern = /\\d+/g;\r\n    for (var y = 0; y < divided.length; y++) {\r\n        if (divided[y].match(numberPattern)) {\r\n            caughtVal.push(divided[y]);\r\n        }\r\n    }\r\n    if (quantificatorWord === plusWord) {\r\n        maxVal = caughtVal[0];\r\n        maxVal = Number(maxVal);\r\n        return maxVal;\r\n    } else if (quantificatorWord === minusWord) {\r\n        minVal = caughtVal[0];\r\n        minVal = Number(minVal);\r\n        return minVal;\r\n    } else {\r\n        medMinVal = caughtVal[0];\r\n        medMaxVal = caughtVal[1];\r\n        return [medMinVal, medMaxVal];\r\n    }\r\n}\r\n\r\nvar highStr = 'Teor alto de ';\r\nvar medStr = 'Teor m√©dio de ';\r\nvar lowStr = 'Teor baixo de '\r\nvar f = 'gordura.';\r\nvar sf = 'gordura saturada.';\r\nvar sg = 'a√ß√∫car.';\r\nvar st = 'sal.';\r\nvar fatOutput = '';\r\nvar satFatOut = '';\r\nvar sugarOut = '';\r\nvar saltOut = '';\r\n\r\nconst checkNutritionalValue = (val) => {\r\n    if (val >= 8.75) {\r\n        fatOutput = highStr + f;\r\n        return fatOutput;\r\n    } else if (val <= 1.5) {\r\n        fatOutput = lowStr + f;\r\n        return fatOutput;\r\n    } else {\r\n        fatOutput = medStr + f;\r\n        return fatOutput;\r\n    }\r\n}\r\n\r\nconst checkSaturFats = (saturfatz) => {\r\n    if (saturfatz >= 2.5) {\r\n        satFatOut = highStr + sf;\r\n        return satFatOut;\r\n    } else if (saturfatz <= 0.75) {\r\n        satFatOut = lowStr + sf;\r\n        return satFatOut;\r\n    } else {\r\n        satFatOut = medStr + sf;\r\n        return satFatOut;\r\n    }\r\n}\r\nconst checkSugar = (sugarval) => {\r\n    if (sugarval >= 11.25) {\r\n        sugarOut = highStr + sg;\r\n        return sugarOut;\r\n    } else if (sugarval <= 2.5) {\r\n        sugarOut = lowStr + sg;\r\n        return sugarOut;\r\n    } else {\r\n        sugarOut = medStr + sg;\r\n        return sugarOut;\r\n    }\r\n}\r\n\r\nconst checkSalt = (saltval) => {\r\n    if (saltval >= 0.75) {\r\n        saltOut = highStr + st;\r\n        return saltOut;\r\n    } else if (saltval <= 0.3) {\r\n        saltOut = lowStr + st;\r\n        return saltOut;\r\n    } else {\r\n        saltOut = medStr + st;\r\n        return saltOut;\r\n    }\r\n}\r\n\r\nconst checkNutritionalValueSolids = (gordura) => {\r\n    if (gordura > 17.4) {\r\n        fatOutput = highStr + f;\r\n        return fatOutput;\r\n    }\r\n    else if (gordura <= 3) {\r\n        fatOutput = lowStr + f;\r\n        return fatOutput;\r\n    }\r\n    else {\r\n        fatOutput = medStr + f;\r\n        return fatOutput;\r\n    }\r\n}\r\nconst checkSaturFatsSolids = (gordSat) => {\r\n    if (gordSat >= 5) {\r\n        satFatOut = highStr + sf;\r\n        return satFatOut;\r\n    }\r\n    else if (gordSat <= 1.5) {\r\n        satFatOut = lowStr + sf;\r\n        return satFatOut;\r\n    }\r\n    else {\r\n        satFatOut = medStr + sf;\r\n        return satFatOut;\r\n    }\r\n\r\n}\r\nconst checkSugarSolids = (acuc) => {\r\n    if (acuc >= 22.5) {\r\n        sugarOut = highStr + sg;\r\n        return sugarOut;\r\n    }\r\n    else if (acuc <= 5) {\r\n        sugarOut = lowStr + sg;\r\n        return sugarOut;\r\n    }\r\n    else {\r\n        sugarOut = medStr + sg;\r\n        return sugarOut;\r\n    }\r\n}\r\nconst checkSaltSolids = (sal) => {\r\n    if (sal > 1.4) {\r\n        saltOut = highStr + st;\r\n        return saltOut;\r\n    }\r\n    else if (sal <= 0.3) {\r\n        saltOut = lowStr + st;\r\n        return saltOut;\r\n    }\r\n    else {\r\n        saltOut = medStr + st;\r\n        return saltOut;\r\n    }\r\n}\r\n\r\n\r\n\r\nconst functions = {\r\n    validateIfNumeric: validateIfNumeric,\r\n    checkNutritionalValue: checkNutritionalValue,\r\n    checkSaturFats: checkSaturFats,\r\n    checkSugar: checkSugar,\r\n    checkSalt: checkSalt,\r\n    checkNutritionalValueSolids: checkNutritionalValueSolids,\r\n    checkSaturFatsSolids: checkSaturFatsSolids,\r\n    checkSugarSolids: checkSugarSolids,\r\n    checkSaltSolids: checkSaltSolids,\r\n}\r\n\r\nexport default functions;","import React from 'react';\r\nimport './Modal.css';\r\nimport { IoMdClose } from \"react-icons/io\";\r\n\r\nconst Modal = (props) => {\r\n    console.log(props);\r\n    if (!props.show) {\r\n        return null;\r\n    }\r\n    //console.log(props);\r\n    return (\r\n\r\n        <div className=\"modal1\" style={styles.modal}>\r\n            <div className=\"modal-background\"\r\n                style={styles.modalBackground}\r\n                onClick={props.onClose} />\r\n            <div className=\"backdrop\">\r\n                <div className=\"row\">\r\n                    <div className=\"col col-12\">\r\n                        <button className=\"btn btn-default float-right shadow-none\"\r\n                            style={styles.buttonZero}\r\n                            onClick={props.onClose}>\r\n                            <IoMdClose />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"output-description\">\r\n                    <div className=\"title-popup\">\r\n                        {props.drinkForm ? props.commonStringBeverage : props.commonString}\r\n                    </div>\r\n                    <div className=\"nutri-eval\">\r\n                        <ul>{props.validationOfFatSolids}</ul>\r\n                        <ul> {props.validationOfSaturSolids}</ul>\r\n                        <ul>{props.validationOfSugarSolids}</ul>\r\n                        <ul>{props.validationOfSaltSolids}</ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst styles = {\r\n    buttonZero: {\r\n        backgroundColor: 'transparent',\r\n        color: 'black',\r\n    },\r\n    modalBackground: {\r\n        position: 'fixed',\r\n        backgroundColor: 'black',\r\n        opacity: 0.5,\r\n        width: '100%',\r\n        height: '100%',\r\n        top: 0,\r\n        left: 0,\r\n    },\r\n    modal: {\r\n        zIndex: 1,\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'fixed',\r\n    },\r\n}\r\n\r\nexport default Modal;","export const alimentos = 'ALIMENTOS';\r\nexport const bebidas = 'BEBIDAS';\r\n\r\nexport const food = {\r\n  label1: \"Gordura\", label2: \"Gordura Saturada\", label3: 'A√ß√∫car', label4: 'Sal',\r\n\r\n}\r\nexport const title = { labelBeberage: \"Quantidade por 100 ml.\", labelFood: \"Quantidade por 100 gr.\" }\r\n\r\n//s√≥lidos :\r\nexport const fat = {\r\n  fatMaxFood: 'Mais de 17.5 gr.',\r\n  fatMediumFood: 'Entre 3 gr. e 17.5 gr.',\r\n  fatMinFood: 'At√© 3 gr.'\r\n}\r\nexport const satFat = {\r\n  satFatMaxFood: 'Mais de 5 gr.',\r\n  satFatMediumFood: 'Entre 1.5 gr. e 5 gr.',\r\n  satFatMinFood: 'At√© 1.5 gr.'\r\n}\r\nexport const sugar = {\r\n  maxSugar: 'Mais de 22.5 gr.',\r\n  mediumSugar: 'Entre 5 gr. e 22.5 gr.',\r\n  minSugar: 'At√© 5 gr.'\r\n}\r\nexport const salt = {\r\n  maxSalt: 'Mais de 1.5 gr.',\r\n  mediumSalt: 'Entre 0.3 gr. e 1.5 gr.',\r\n  minSalt: 'At√© 0.3 gr.'\r\n}\r\n\r\n//liquidos\r\n\r\nexport const liq_fat = {\r\n  fatMaxFood: 'Mais de 8.75 gr.',\r\n  fatMediumFood: 'Entre 1.5 gr. e 8,75 gr. ',\r\n  fatMinFood: 'At√© 1.5 gr.'\r\n}\r\nexport const liq_satFat = {\r\n  satFatMaxFood: 'Mais de 2.5 gr.',\r\n  satFatMediumFood: 'Entre 0.75 gr. e 2.5 gr.',\r\n  satFatMinFood: 'At√© 0.75 gr.'\r\n}\r\nexport const liq_sugar = {\r\n  maxSugar: 'Mais de 11.25 gr.',\r\n  mediumSugar: 'Entre 2.5 gr. e 11.25 gr.',\r\n  minSugar: 'At√© 2.5 gr.'\r\n}\r\nexport const liq_salt = {\r\n  maxSalt: 'Mais de 0.75 gr.',\r\n  mediumSalt: 'Entre 0.3 gr. e 0.75 gr.',\r\n  minSalt: 'At√© 0.3 gr.'\r\n}\r\n\r\nexport const colTitle = { title: 'ALIMENTOS', title2: 'BEBIDAS' }","import React, { useState, useRef, useEffect, Fragment } from 'react';\r\nimport './Form.css';\r\nimport functions from '../functions/functions';\r\nimport Modal from './Modal';\r\nimport { alimentos, bebidas } from '../constants/constants';\r\n\r\nconst Form = (props) => {\r\n    //console.log(props, \" props\");\r\n    var validationOfFatSolids, validationOfSaturSolids, validationOfSugarSolids, validationOfSaltSolids\r\n    var validationOfFat, validationOfSatur, validationOfSugar, validationOfSalt;\r\n\r\n    const whichFormRef = useRef();\r\n    const fatRef = useRef(); // ref select fat\r\n    const saturRef = useRef();// ref select satfat\r\n    const sugarRef = useRef();// ref select sugar\r\n    const saltyRef = useRef();// ref select salt\r\n\r\n    //solid food states\r\n    const [fatOption, setFatOption] = useState(props.fatMaxFood);\r\n    const [satFatOption, setSatFatOption] = useState(props.satFatMaxFood);\r\n    const [sugarOption, setSugarOption] = useState(props.maxSugar);\r\n    const [saltOption, setSaltOption] = useState(props.maxSalt);\r\n\r\n    //liquid food states\r\n    const [fatBeb, setFatBeb] = useState(props.fatMaxFood);\r\n    const [satFatBeb, setSatFatBeb] = useState(props.satFatMaxFood);\r\n    const [sugarOptionBeb, setSugarOptionBeb] = useState(props.maxSugar);\r\n    const [saltOptionBeb, setSaltOptionBeb] = useState(props.maxSalt);\r\n\r\n    const [activate, setActivate] = useState(false);\r\n    const [stroutp, setStrOutp] = useState(''); //string do outp\r\n    const [stringDrinkOutput, setStringDrinkOutput] = useState('');  //output\r\n    const [fOutp, setFOutp] = useState('');  //output\r\n    const [satfOutp, setSatFOutp] = useState('');  //output\r\n    const [sugOutp, setSugFOutp] = useState('');  //output\r\n    const [salOutp, setSalFOutp] = useState('');  //output\r\n    const [formIsFood, setFormIsFood] = useState(false);\r\n    const [formIsDrink, setFormIsDrink] = useState(false);\r\n\r\n    const out = useRef();\r\n    const toggle = () => {\r\n        activate ? setActivate(false) : setActivate(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, []);\r\n\r\n\r\n    const handleClickOutside = event => {\r\n        if (out.current && !out.current.contains(event.target)) {\r\n            setActivate(false);\r\n        }\r\n    };\r\n\r\n    const handleChange = () => {\r\n        //  console.log(whichFormRef.current.innerText, 'whichFormRef');\r\n        if (whichFormRef.current.innerText.startsWith(alimentos)) {\r\n            setFatOption(fatRef.current.value);\r\n            setSatFatOption(saturRef.current.value);\r\n            setSugarOption(sugarRef.current.value);\r\n            setSaltOption(saltyRef.current.value);\r\n        }\r\n        else if (whichFormRef.current.innerText.startsWith(bebidas)) {\r\n            setFatBeb(fatRef.current.value);\r\n            setSatFatBeb(saturRef.current.value);\r\n            setSugarOptionBeb(sugarRef.current.value);\r\n            setSaltOptionBeb(saltyRef.current.value);\r\n        }\r\n    }\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        var arrayComValoresRetornados = [];\r\n        var valorRetornado;\r\n        var gordura;\r\n        var gordSat;\r\n        var acuc;\r\n        var sal;\r\n        var possibilities = [];\r\n\r\n        if (whichFormRef.current.innerText.startsWith(bebidas)) {\r\n            possibilities = [fatBeb, satFatBeb, sugarOptionBeb, saltOptionBeb];\r\n            for (var x = 0; x < possibilities.length; x++) {\r\n                valorRetornado = functions.validateIfNumeric(possibilities[x]);\r\n                arrayComValoresRetornados.push(valorRetornado);\r\n            }\r\n            //for legibility purposes only:\r\n            gordura = arrayComValoresRetornados[0]\r\n            gordSat = arrayComValoresRetornados[1];\r\n            acuc = arrayComValoresRetornados[2];\r\n            sal = arrayComValoresRetornados[3];\r\n\r\n            validationOfFat = functions.checkNutritionalValue(gordura);\r\n            validationOfSatur = functions.checkSaturFats(gordSat);\r\n            validationOfSugar = functions.checkSugar(acuc); //aqui\r\n            validationOfSalt = functions.checkSalt(sal);//aqui\r\n\r\n            setStringDrinkOutput('A bebida selecionada possui: ');\r\n            setFOutp(validationOfFat);\r\n            setSatFOutp(validationOfSatur);\r\n            setSugFOutp(validationOfSugar);\r\n            setSalFOutp(validationOfSalt);\r\n            setFormIsFood(false);\r\n            setFormIsDrink(true);\r\n        }\r\n\r\n\r\n        if (whichFormRef.current.innerText.startsWith(alimentos)) {\r\n            possibilities = [fatOption, satFatOption, sugarOption, saltOption];\r\n            for (var x = 0; x < possibilities.length; x++) {\r\n                valorRetornado = functions.validateIfNumeric(possibilities[x]);\r\n                arrayComValoresRetornados.push(valorRetornado);\r\n            }\r\n            //for legibility purposes only:\r\n            gordura = arrayComValoresRetornados[0]\r\n            gordSat = arrayComValoresRetornados[1];\r\n            acuc = arrayComValoresRetornados[2];\r\n            sal = arrayComValoresRetornados[3];\r\n\r\n\r\n            validationOfFatSolids = functions.checkNutritionalValueSolids(gordura);\r\n            validationOfSaturSolids = functions.checkSaturFatsSolids(gordSat);\r\n            validationOfSugarSolids = functions.checkSugarSolids(acuc); //aqui\r\n            validationOfSaltSolids = functions.checkSaltSolids(sal);//aqui\r\n\r\n            setStrOutp('O alimento selecionado possui: ');\r\n            setFOutp(validationOfFatSolids);\r\n            setSatFOutp(validationOfSaturSolids);\r\n            setSugFOutp(validationOfSugarSolids);\r\n            setSalFOutp(validationOfSaltSolids);\r\n            setFormIsFood(true);\r\n            setFormIsDrink(false);\r\n        }\r\n        toggle();\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <div ref={out}>\r\n                <form className=\"theform\" ref={whichFormRef}>\r\n                    <h2>{props.colTitle}</h2>\r\n                    <label htmlFor=\"inputs\"\r\n                        className=\"title\">{props.title}</label>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"fat\" className=\"label-select\">{props.label.label1}</label>\r\n                        <div className=\"col\">\r\n                            <select className=\"form-control \" id=\"fat\" onChange={handleChange} ref={fatRef}>\r\n                                <option className=\"opt\" value={props.fatMaxFood} >{props.fatMaxFood}</option>\r\n                                <option className=\"opt\" value={props.fatMediumFood} >{props.fatMediumFood}</option>\r\n                                <option className=\"opt\" value={props.fatMinFood}>{props.fatMinFood}</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"saturatedFat\" className=\"label-select\">{props.label.label2}</label>\r\n                        <div className=\"col\">\r\n                            <select className=\"form-control\"\r\n                                id=\"saturatedFat\"\r\n                                onChange={handleChange} ref={saturRef}>\r\n                                <option className=\"opt\">{props.satFatMaxFood}</option>\r\n                                <option className=\"opt\">{props.satFatMediumFood}</option>\r\n                                <option className=\"opt\">{props.satFatMinFood}</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"sugar\" className=\"label-select\">{props.label.label3}</label>\r\n                        <div className=\"col\">\r\n\r\n                            <select className=\"form-control \" id=\"sugar\" onChange={handleChange} ref={sugarRef}>\r\n                                <option className=\"opt\">{props.maxSugar}</option>\r\n                                <option className=\"opt\">{props.mediumSugar}</option>\r\n                                <option className=\"opt\">{props.minSugar}</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"salt\" className=\"label-select\">{props.label.label4}</label>\r\n                        <div className=\"col\">\r\n                            <select className=\"form-control\" id=\"salt\" onChange={handleChange} ref={saltyRef}>\r\n                                <option className=\"opt\">{props.maxSalt}</option>\r\n                                <option className=\"opt\">{props.mediumSalt}</option>\r\n                                <option className=\"opt\">{props.minSalt}</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <button type=\"submit\"\r\n                        className=\"btn submit\"\r\n                        onClick={handleSubmit}>ENVIAR\r\n                                </button>\r\n                </form>\r\n\r\n                <Modal show={activate} onClose={toggle}\r\n                    commonString={stroutp}\r\n                    commonStringBeverage={stringDrinkOutput}\r\n                    validationOfFatSolids={fOutp}\r\n                    validationOfSaturSolids={satfOutp}\r\n                    validationOfSugarSolids={sugOutp}\r\n                    validationOfSaltSolids={salOutp}\r\n                    foodForm={formIsFood}\r\n                    drinkForm={formIsDrink}\r\n                >\r\n                </Modal>\r\n            </div>\r\n\r\n        </Fragment>\r\n    )\r\n}\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport { food, title, fat, satFat, sugar, salt, liq_fat, liq_satFat, liq_sugar, liq_salt, colTitle } from './constants/constants';\n\nfunction App() {\n  return (\n\n\n    <div className=\"container forms-container\">\n\n\n      { /*<div className=\"row page-title\">Know your food!</div>*/}\n\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <Form label={food}\n            title={title.labelFood}\n            colTitle={colTitle.title}\n            className=\"formFood\"\n            fatMaxFood={fat.fatMaxFood}\n            fatMediumFood={fat.fatMediumFood}\n            fatMinFood={fat.fatMinFood}\n            satFatMaxFood={satFat.satFatMaxFood}\n            satFatMediumFood={satFat.satFatMediumFood}\n            satFatMinFood={satFat.satFatMinFood}\n            maxSugar={sugar.maxSugar}\n            mediumSugar={sugar.mediumSugar}\n            minSugar={sugar.minSugar}\n            maxSalt={salt.maxSalt}\n            mediumSalt={salt.mediumSalt}\n            minSalt={salt.minSalt}\n          />\n        </div>\n        <div className=\"col-sm\">\n          <Form label={food}\n            title={title.labelBeberage}\n            colTitle={colTitle.title2}\n            className=\"formDrink\"\n            fatMaxFood={liq_fat.fatMaxFood}\n            fatMediumFood={liq_fat.fatMediumFood}\n            fatMinFood={liq_fat.fatMinFood}\n            satFatMaxFood={liq_satFat.satFatMaxFood}\n            satFatMediumFood={liq_satFat.satFatMediumFood}\n            satFatMinFood={liq_satFat.satFatMinFood}\n            maxSugar={liq_sugar.maxSugar}\n            mediumSugar={liq_sugar.mediumSugar}\n            minSugar={liq_sugar.minSugar}\n            maxSalt={liq_salt.maxSalt}\n            mediumSalt={liq_salt.mediumSalt}\n            minSalt={liq_salt.minSalt}\n          />\n        </div>\n      </div>\n    </div>\n\n\n  );\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}